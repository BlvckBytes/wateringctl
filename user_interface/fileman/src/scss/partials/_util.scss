@use 'config' as *;
@use 'logic' as *;

@use 'sass:map';
@use 'sass:color';
@use 'sass:string';
@use 'sass:math';

@forward 'config';

/// Generate a light, dark and opac version for every color
/// next to the native value itself
/// @param {Number} $delta [5%] Amount to lighten/darken colors, null for none
/// @param {Number} $opac [0.5] Opacity of opac values, null for none
/// @author BlvckBytes <blvckbytes@gmail.com>
@function buildColorMap($delta: 15%, $opac: 0.5) {
  $colors: ();

  @each $name, $color in map-merge($main-palette, $generic-palette) {
    $colors: map-merge($colors, (
      // Base colors
      $name: $color,

      // Light and dark versions
      #{$name}--l: if($delta, color.adjust($color, $lightness: $delta), null),
      #{$name}--d: if($delta, color.adjust($color, $lightness: -$delta), null),

      // Transparent versions
      #{$name}--o: if($opac, color.adjust($color, $alpha: -$opac), null),
      #{$name}--l--o: if($delta and $opac, color.adjust($color, $lightness: $delta, $alpha: -$opac), null),
      #{$name}--d--o: if($delta and $opac, color.adjust($color, $lightness: -$delta, $alpha: -$opac), null),
    ));
  }

  @return $colors;
}

/// Apply styles only for a certain breakpoint
/// @param {String} $breakpoint Name of known breakpoint, @see {variable} $breakpoints
/// @param {String} $scope Scope of query, can be range | less | more | min | max
/// @output Constructed media query with provided content
/// @author BlvckBytes <blvckbytes@gmail.com>
@mixin bp-style($breakpoint, $scope: range) {
  // Create media query based on width from map
  @if map-has-key($breakpoints, $breakpoint) {
    $bounds: map-get($breakpoints, $breakpoint);
    $bounds-min: nth($bounds, 1);
    $bounds-max: nth($bounds, 2);

    // Max bound check
    @if ($scope == more or $scope == max) and $bounds-max == -1 {
      @error 'Cannot use max of #{$breakpoint}, (max = -1)!';
    }

    // Min bound check
    @if ($scope == less or $scope == min) and $bounds-min == -1 {
      @error 'Cannot use min of #{$breakpoint}, (min = -1)!';
    }

    // Apply min-width if not -1
    $min-instr: if(
      $bounds-min != -1 and $scope != max,
      ' and (min-width: #{$bounds-min})',
      ''
    );

    // Apply max-width if not -1
    $max-instr: if(
      $bounds-max != -1 and $scope != min,
      ' and (max-width: #{$bounds-max})',
      ''
    );

    // More: min-width: <max-bound>, no max-width
    @if $scope == more {
      $min-instr: ' and (min-width: #{$bounds-max})';
      $max-instr: '';
    }

    // Less: max-width: <min-bound>, no min-width
    @if $scope == less {
      $min-instr: '';
      $max-instr: ' and (max-width: #{$bounds-min})';
    }

    // Build query from template
    @media #{'only screen' + $min-instr + $max-instr} {
      @content;
    }
  }
  
  // Breakpoint not known within map
  @else {
    @error 'Breakpoint #{$breakpoint} is not specified!';
  }
}

/// Convert pixels to rems
/// @param {Number} $pixels Pixel value
/// @return Resulting value in REMs
/// @author BlvckBytes <blvckbytes@gmail.com>
@function rem($pixels) {
  @return #{$pixels / $rem-value}rem;
}

/// Inline keyframe animation from content
/// @param {Number} $duration Duration of animation
/// @param {boolean} $repeating [false] Whether to infinitely repeat
/// @output Keyframes declaration with unique ID and it's assignment
/// @author BlvckBytes <blvckbytes@gmail.com>
@mixin keyframe-animation($duration, $repeating: false, $delay: 0) {
  // Generate unique name
  $name: kfa-#{unique-id()};

  // Create keyframes from mixin content
  @keyframes #{$name} { @content; }

  // Apply animation
  animation: $name $duration ease forwards;
  animation-delay: $delay;
  @if $repeating {
    animation-direction: alternate;
    animation-iteration-count: infinite;
  }
}

:root {
  // Apply color vars
  @each $name, $color in buildColorMap() {
    // Skip null values (when dark/light and or opac are disabled)
    @if $color {
      --#{$name}: #{$color};
    }
  }

  // Render initial var values directly into root
  @each $name, $value in map-get($var-states, _fallback) {
    --#{$name}: #{$value};
  }

  // Render all bp-dependent vars
  @each $breakpoint, $size in $breakpoints {
    // Default detector is hidden
    .bp__#{$breakpoint}--active {
      display: none;
    }
    
    @include bp-style($breakpoint) {
      @each $name, $value in map-get($var-states, $breakpoint) {
        --#{$name}: #{$value};
      }
      
      // Change detector to active (visible)
      .bp__#{$breakpoint}--active {
        display: block;
      }
    }
  }

  // Apply REM
  font-size: var(--fs-base);
}

/// Applies to grid containers that need a maximum number of
/// columns, a specific axis-gap as well as item-size constraints
/// @param {Number} $max-columns Maximum number of columns
/// @param {Number} $col-gap Gap between columns
/// @param {Number} $row-gap Gap between rows
/// @param {Number} $max-item-width Size of fully expanded item
/// @param {Number} $min-item-width Size of fully contracted item
/// @param {Number} $min-item-width-mobile Size of min-item-width on mobile
/// @output All grid properties and width constraints
/// @author BlvckBytes <blvckbytes@gmail.com>
@mixin grid-columns(
  $max-columns, $col-gap, $row-gap, $max-item-width, $min-item-width,
  $min-item-width-mobile: $min-item-width
) {
  // Create grid with centered cells, applying min-width
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($min-item-width, 1fr));
  justify-content: center;
  justify-items: center;
  column-gap: $col-gap;
  row-gap: $row-gap;

  // Center grid container
  margin: 0px auto;
  width: 100%;
  
  // Max-width is all columns plus their spaces inbetween
  max-width: calc(
  #{$max-item-width} * #{$max-columns} +
  (#{$max-columns} - 1) * #{$col-gap}
  );
  
  // Items have max width
  & > * {
  max-width: $max-item-width;
  }

  // Adapt to mobile min-width
  @include bp-style(mobile) {
  grid-template-columns: repeat(auto-fit, minmax($min-item-width-mobile, 1fr));
  }
}

/// Encode a string to be used in url(), used for css-hacks
/// @param {String} $input Input string to be encoded
/// @return {String} URL-encoded result string
/// @author BlvckBytes <blvckbytes@gmail.com>
@function url-encode($input) {
  $LUT: (
  ' ': '%20',
  '"': '%22',
  '<': '%3C',
  '>': '%3E',
  '#': '%23',
  '%': '%25',
  '{': '%7B',
  '}': '%7D',
  '|': '%7C',
  '\\': '%5C',
  '^': '%5E',
  '~': '%7E',
  '[': '%5B',
  ']': '%5D',
  );

  $result: '';
  
  // Translate chars individually
  @for $i from 1 through str-length($input) {
  $curr-char: str-slice($input, $i, $i);
  $enc-char: if(map-has-key($LUT, $curr-char), map-get($LUT, $curr-char), $curr-char);
  $result: $result + $enc-char;
  }

  @return $result;
}

/// This is a sass-translation and extension of the online-tool https://kovart.github.io/dashed-border-generator/
/// Produces a proper dashed border with all control parameters
/// @param {String} $color
/// @output Applied border-radius and generated background image representing border-svg
/// @author BlvckBytes <blvckbytes@gmail.com>
@mixin dashed-border-bg(
  $radius, $width: .1em, $dash-array: 30, $dash-offset: 0, $line-cap: square,
  $color-1: #FFF, $color-2: #FFF, $color-deg: 0deg
) {
  @if $line-cap != 'square' and $line-cap != 'round' and $line-cap != 'butt' {
  @error 'Unknown dash-border line-cap "#{$line-cap}", use (square, round, butt)!';
  }

  /*
  Calculate center x and y coords of gradient vector
  The gradient square gets inscribed in a circle, which has the
  same diameter as the square (ratio sqrt(2)), then the resulting
  values are capped between 0% to 100% to stay within the rectangle.
  Angles are subtracted from 270deg and x1 and x2 are swapped, to
  create the same behavior as a linear-gradient would have
  */
  $x-val: math.floor(math.cos(270deg - $color-deg) * 50% * math.sqrt(2));
  $y-val: math.floor(math.sin(270deg - $color-deg) * 50% * math.sqrt(2));

  $grad-def:
  "<defs>" +
  "<linearGradient id='grad' " +
    // Set vector start (x1, y1) and end (x2, y2)
    "x1='#{math.clamp(0%, 50% + $x-val, 100%)}' " +
    "y1='#{math.clamp(0%, 50% - $y-val, 100%)}' " +
    "x2='#{math.clamp(0%, 50% - $x-val, 100%)}' " +
    "y2='#{math.clamp(0%, 50% + $y-val, 100%)}'" +
  ">" +
    // Vector at 0% is color-1, at 100% color-2
    "<stop offset='0%' stop-color='#{$color-1}'/>" +
    "<stop offset='100%' stop-color='#{$color-2}'/>" +
  "</linearGradient>" +
  "</defs>";

  // Apply border-radius to container
  border-radius: $radius;

  // Apply generated SVG with grad-stroke and dash-properties as background
  background-image: url(url-encode(
  "data:image/svg+xml," +
  "<svg width='100%' height='100%' xmlns='http://www.w3.org/2000/svg'>" +
  "#{$grad-def}" +
    "<rect " +
    "width='100%' height='100%' fill='none' stroke='url(#grad)' " +
    "rx='#{$radius}' ry='#{$radius}' stroke-width='#{$width}' " +
    "stroke-dasharray='#{$dash-array}' stroke-dashoffset='#{$dash-offset}' " +
    "stroke-linecap='#{$line-cap}" +
    "'/>" +
  "</svg>"
  ));
}